#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE
turn_secret=${YNH_APP_ARG_TURN_SECRET:-$(ynh_string_random --length=10)}

app=$YNH_APP_INSTANCE_NAME

# A password to manage turn service from the command line
export cli_password=$(ynh_string_random --length=10)

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --time --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=admin --value=$admin
ynh_app_setting_set --app=$app --key=language --value=$language

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding available TCP+UDP ports..." --time --weight=1

# Find 2 available ports
port_stun=$(ynh_find_port --port=3478)
port_turns=$(ynh_find_port --port=5349)
ynh_app_setting_set --app=$app --key=port_stun --value=$port_stun
ynh_app_setting_set --app=$app --key=port_turn --value=$port_turns

# XXX workaround
# Currently, checking/reserving port ranges is buggy in yunohost
# So instead of configuring a range of plenty of UDP ports, we configure a range of 2 UDP ports for turnserver
#ynh_exec_warn_less yunohost firewall allow UDP -4 49152:65535
port_udp_min=$(ynh_find_port --port=49152)
port_udp_max=$(ynh_find_port --port=49153) # XXX dirty workaround because currently, checking for port range is buggy in yunohost
ynh_app_setting_set --app=$app --key=port_udp_min --value=$port_udp_min
ynh_app_setting_set --app=$app --key=port_udp_max --value=$port_udp_max
ynh_exec_warn_less yunohost firewall allow UDP -4 $port_udp_min
ynh_exec_warn_less yunohost firewall allow UDP -4 $port_udp_max

# Open the port
ynh_script_progression --message="Configuring firewall..." --time --weight=1
ynh_exec_warn_less yunohost firewall allow --no-upnp Both $port_stun
ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $port_turns

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --time --weight=1
ynh_install_app_dependencies $pkg_dependencies

#=================================================
# SPECIFIC SETUP
#=================================================

export port_stun
export port_turns
export port_udp_min
export port_udp_max
ynh_add_config --template="metronome.cfg.lua" --destination="$metronome_partial_config_filename"

#=================================================
# MODIFY A CONFIG FILE
#=================================================

test -f $coturn_config_filename && mv $coturn_config_filename ${coturn_config_filename}.bkp
ynh_add_config --template="turnserver.conf" --destination="$coturn_config_filename"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="$metronome_partial_config_filename"
ynh_store_file_checksum --file="$coturn_config_filename"

#=================================================
# GENERIC FINALIZATION
#=================================================

# Use logrotate to manage application logfile(s)
#ynh_use_logrotate

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
#ynh_script_progression --message="Integrating service in YunoHost..." --time --weight=1
#yunohost service add coturn --description="coturn, a STUN/TURN server" --log="/var/log/$app/$app.log" \
#  --needs_exposed_ports 3478 5349
#
##=================================================
## START SYSTEMD SERVICE
##=================================================
#ynh_script_progression --message="Starting a systemd service..." --time --weight=1
#
#### `ynh_systemd_action` is used to start a systemd service for an app.
#### Only needed if you have configure a systemd service
#### If you're not using these lines:
####		- Remove the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the backup script
####		- As well as the section "START SYSTEMD SERVICE" in the restore script
####		- As well as the section"STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the upgrade script
####		- And the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the change_url script
#
## Start a systemd service
#ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# SETUP FAIL2BAN
#=================================================
#ynh_script_progression --message="Configuring Fail2Ban..." --time --weight=1
#
## Create a dedicated Fail2Ban config
#ynh_add_fail2ban_config --logpath="/var/log/nginx/${domain}-error.log" --failregex="Regex to match into the log for a failed login"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	ynh_permission_update --permission="main" --add="visitors"
fi

# Only the admin can access the admin panel of the app (if the app has an admin panel)
ynh_permission_create --permission="admin" --url="/admin" --allowed=$admin

# Everyone can access to the api part
# We don't want to display the tile in the sso so we put --show_tile="false"
# And we don't want that the YunoHost Admin can remove visitors group to this permission, so we put --protected="true"
ynh_permission_create --permission="api" --url "/api" --allowed="visitors" --show_tile="false" --protected="true"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
